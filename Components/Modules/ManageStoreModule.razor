@inject SettingsService SettingsService
@inject NavigationManager Navigation
@inject IStoreService StoreService
@inject IStoreTypeService StoreTypeService
@inject IMapper Mapper


<div class="p-4 bg-light">
    @if (_storeModel.StoreId != 0 || DisplayForm)
    {
        @if (!DisplayForm)
        {
            <div class="mt-5">
                <h4 class="text-primary">Loja</h4>
                <p><strong>Loja:</strong> @_storeModel.StoreName</p>
                <p><strong>CNPJ:</strong> @_storeModel.Cnpj</p>
                <p><strong>Tipo:</strong> @_storeTypeName</p>
                <p><strong>Licença:</strong> @_storeModel.StoreId-@_storeModel.StoreUniqueId</p>
            </div>
            <button class="btn btn-warning mt-2 me-2" @onclick="DisplayFormClick">Editar</button>
        }

        else
        {
            <h4 class="text-primary mb-4">Detalhes</h4>
            <EditForm Model="_storeModel" OnValidSubmit="HandleSaveStore">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <!-- Store ID (Hidden) -->
                <InputNumber id="storeId" @bind-Value="_storeModel.StoreId" style="display: none;" />

                <div class="mb-3">
                    <InputText id="storeName" @bind-Value="_storeModel.StoreName" class="form-control form-control-sm rounded" placeholder="Nome da Loja" style="width: 50%;" />
                </div>

                <div class="mb-3">
                    <InputText id="cnpj" @bind-Value="_storeModel.Cnpj" class="form-control form-control-sm rounded" placeholder="CNPJ" style="width: 50%;" />
                </div>

                <div class="mb-3">
                    <InputSelect id="storeType" @bind-Value="_storeModel.StoreTypeId" @bind-Value:after="TypeChanged"
                                 class="form-control form-control-sm rounded"
                                 style="width: 50%;">
                        @foreach (var storeType in _storeTypes)
                        {
                            <option value="@storeType.StoreTypeId">@storeType.StoreTypeName</option>
                        }
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-primary mt-3 rounded" style="width: 50%;">
                    @(_storeModel.StoreId == 0 ? "Salvar" : "Atualizar")
                </button>
            </EditForm>
        }
    }
    else
    {
        <span><b>Carregando...</b></span>
    }
</div>

@code {
    private StoreModel _storeModel = new();
    private List<StoreTypeModel>? _storeTypes = new();
    private AppSettings? _settings = new();
    private Store? _createdStore;
    private bool DisplayForm = false;
    private string _storeTypeName = "";
    private string? _storeUniqueIdString;


    protected override async Task OnInitializedAsync()
    {
        var results = await StoreTypeService.GetAllAsync();
        _storeTypes = Mapper.Map<List<StoreTypeModel>>(results.Data);
        if (StoreService.currentStore is not null)
        {
            _storeModel = Mapper.Map<StoreModel>(StoreService.currentStore);
        }
        else
        {

            var storeId = SettingsService.appSettings.StoreId;
            if (storeId > 0)
            {
                var store = await StoreService.GetByIdAsync(storeId);
                if (store.Data is not null)
                {
                    _storeModel = Mapper.Map<StoreModel>(store.Data);
                }
            }
            else
            {
                DisplayFormClick();

            }
        }
        SetStoreDetails();
    }

    private void SetStoreDetails()
    {
        _storeTypeName = _storeTypes?.FirstOrDefault(t => t.StoreTypeId == _storeModel.StoreTypeId)?.StoreTypeName ?? string.Empty;
    }

    public void TypeChanged()
    {
        SetStoreDetails();
    }

    private async Task HandleSaveStore()
    {
        var storeEntity = Mapper.Map<Store>(_storeModel);
        if (_storeModel.StoreId == 0)
        {
            storeEntity.StoreUniqueId = Guid.NewGuid();
            var results = await StoreService.AddAsync(storeEntity);
            _storeModel = Mapper.Map<StoreModel>(results.Data);   
        }
        else
        {
            await StoreService.UpdateAsync(storeEntity);
            _storeModel = Mapper.Map<StoreModel>(storeEntity);
        }
        _createdStore = storeEntity;
        await SaveSettings();
        SetStoreDetails();
        DisplayFormClick();
    }

    private async Task SaveSettings()
    {
        DateTime today = DateTime.Now;
        DateTime oneYearFromToday = today.AddYears(1);
        _settings.AppVersion = "1.0.0";
        _settings.StoreUniqueId = _storeModel.StoreUniqueId;
        _settings.StoreId = _storeModel.StoreId;
        _settings.EndDate = oneYearFromToday;
        _settings.StoreName = _storeModel.StoreName;
        _settings.VersionDate = DateTime.Now;
        _settings.StartDate = today;
        _settings.IsActive = true;

        await SettingsService.SaveSettingsAsync(_settings);
    }

    private void DisplayFormClick()
    {
        DisplayForm = !DisplayForm;
    }
}
